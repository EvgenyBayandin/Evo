package Task_3_6;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Comparator;


public class User {

    /*
    üí°- –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "User", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
    private String name;
    private Integer age;
    üí°- –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å –≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—â–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    üí°- –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å –º–µ—Ç–æ–¥: public String toString(), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "–í–∞—Å—è, –≤–æ–∑—Ä–∞—Å—Ç 25 –ª–µ—Ç",
    –≥–¥–µ "–í–∞—Å—è" - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π name, –∞ 25 - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π age.
    üí°- –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –∏–º–∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    –≤ –º–µ—Ç–æ–¥–µ main –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:
    üí°- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∞–ø—É HashMap<Integer, List<User>>(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ —Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
    üí°- –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ 5-—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–≤–æ–¥–µ, –≤ HashMap.
    –ü—Ä–∏—á–µ–º, –µ—Å–ª–∏ –∫–ª—é—á (–≤–æ–∑—Ä–∞—Å—Ç) –≤ –º–∞–ø–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –ª–µ–∂–∞—â–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ –∫–ª—é—á—É.
    –ï—Å–ª–∏ –∫–ª—é—á –≤ –º–∞–ø–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—É–¥–∞ —é–∑–µ—Ä–∞ –∏ –∫–ª–∞—Å—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤ –º–∞–ø—É –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É.
    üí°- –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –µ—Å—Ç—å –≤ –º–∞–ø–µ, –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞,
    –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ –∫–ª—é—á—É –∏–∑ –º–∞–ø—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏.
    */

    private String name;
    private Integer age;

    public User(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public static void main(String[] args) {

        Scanner in = new Scanner(System.in);

        HashMap<Integer, List<User>> mapUsers = new HashMap<>();

        boolean isValidData;

        for (int i = 1; i <= 5; i++) {

            boolean isValidName = false;
            String name = "";
            while (!isValidName) {
                try {
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + i + ": ");
                    name = in.nextLine().trim();
                    if (name != null && name.isEmpty()) {
                        System.out.println("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" + i + ": ");
                        continue;
                    }
                } catch (Exception e) {
                    System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + i + "!");
                }
                isValidName = true;
            }

            isValidData = false;
            int age = 0;
            while (!isValidData) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + i + ": ");
                String ageInput = in.nextLine().trim();
                try {
                    age = Integer.parseInt(ageInput);
                    if(age <= 0 || age > 100) {
                        System.out.println("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç");
                        continue;
                    }
                    isValidData = true;
                } catch (NumberFormatException e) {
                    System.out.println("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + i + ": ");
                }
            }
            User user = new User(name, age);
            List<User> users = mapUsers.getOrDefault(age, new ArrayList<>());
            users.add(user);
            mapUsers.put(age, users);
        }

        TreeMap<Integer, List<User>> sortedMap = new TreeMap<>(mapUsers);

        isValidData = false;
        while (!isValidData) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ");
            String ageIn = in.nextLine().trim();
            try {
                int a = Integer.parseInt(ageIn);
                if(a <= 0 || a > 100) {
                    System.out.println("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç");
                    continue;
                }

                List<User> users = sortedMap.get(a);
                if (users != null && !users.isEmpty()) {
                    users.sort(Comparator.comparing(User::getName));
                    for (User user : users) {
                        System.out.println(user.toString());
                    }
                } else {
                    System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º '" + a + "' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                }

                isValidData = true;
            } catch (NumberFormatException e) {
                System.out.println("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ");
            }
        }
        in.close();
    }

    @Override
    public String toString(){
            return name + ", –≤–æ–∑—Ä–∞—Å—Ç " + age + " –ª–µ—Ç";
    }

}